syntax = "proto3";
package dreamjournal;

import "google/api/annotations.proto";

// Go import path and local package name for generated code
option go_package = "github.com/Calrus/ourdreamjournal/backend/proto";

// User represents a user account
message User {
  string id = 1;
  string email = 2;
  string username = 3;
  int64 created_at = 4;
}

// RegisterRequest is used to create a new user account
message RegisterRequest {
  string email = 1;
  string username = 2;
  string password = 3;
}

// LoginRequest is used to authenticate a user
message LoginRequest {
  string email = 1;
  string password = 2;
}

// AuthResponse is returned after successful authentication
message AuthResponse {
  User user = 1;
  string token = 2;
}

// Dream represents a single dream entry
message Dream {
  string id = 1;
  string user_id = 2;
  string text = 3;
  int64 timestamp = 4;  // Unix timestamp
  bool public = 5;
  string title = 11;
  // Ratings (1-10)
  int32 nightmare_rating = 12; // 1 = nightmare, 10 = great dream
  int32 vividness_rating = 13; // 1 = not vivid, 10 = extremely vivid
  int32 clarity_rating = 14;   // 1 = foggy, 10 = crystal clear
  int32 emotional_intensity_rating = 15; // 1 = flat, 10 = intense
}

// DreamRequest is used to create a new dream entry
message DreamRequest {
  string user_id = 1;
  string text = 2;
  bool public = 3;
  string title = 11;
  // Ratings (1-10)
  int32 nightmare_rating = 12;
  int32 vividness_rating = 13;
  int32 clarity_rating = 14;
  int32 emotional_intensity_rating = 15;
}

// DreamResponse is returned after creating a dream
message DreamResponse {
  Dream dream = 1;
}

// DreamSummary is returned after summarizing a dream
message DreamSummary {
  string summary = 1;
}

// ProphecyResponse is returned after generating a prophecy
message ProphecyResponse {
  string prophecy = 1;
}

// TagResponse is returned after extracting tags from a dream
message TagResponse {
  repeated string tags = 1;
}

// ListRequest is used to fetch dreams
message ListRequest {
  string user_id = 1;
  bool include_public = 2;  // Whether to include public dreams from other users
}

// UserRequest is used to fetch AI insights for a user
message UserRequest {
  string user_id = 1;
}

// DreamInsight contains AI summary and tags for a dream
message DreamInsight {
  string dream_id = 1;
  string summary = 2;
  repeated string tags = 3;
}

// Friend request/response
message FriendRequestMsg {
  string user_id = 1;
  string friend_id = 2;
}

message FriendResponseMsg {
  string status = 1; // 'pending', 'accepted', 'rejected'
}

message Friend {
  string id = 1;
  string username = 2;
  string display_name = 3;
  string profile_image_url = 4;
}

message FriendList {
  repeated Friend friends = 1;
}

// List of dreams by friends
message FriendsDreamsRequest {
  string user_id = 1;
}

message FriendsDreamsResponse {
  repeated Dream dreams = 1;
}

// DreamJournal service definition
service DreamJournal {
  // Register creates a new user account
  rpc Register(RegisterRequest) returns (AuthResponse) {
    option (google.api.http) = {
      post: "/api/register"
      body: "*"
    };
  }
  
  // Login authenticates a user
  rpc Login(LoginRequest) returns (AuthResponse) {
    option (google.api.http) = {
      post: "/api/login"
      body: "*"
    };
  }
  
  // CreateDream creates a new dream entry
  rpc CreateDream(DreamRequest) returns (DreamResponse) {
    option (google.api.http) = {
      post: "/api/dream"
      body: "*"
    };
  }
  
  // ListDreams streams dreams based on the request parameters
  rpc ListDreams(ListRequest) returns (stream Dream) {
    option (google.api.http) = {
      get: "/api/dreams"
    };
  }

  // SummarizeDream summarizes a dream using OpenAI
  rpc SummarizeDream(DreamRequest) returns (DreamSummary);

  // DreamProphecy generates a mystical prophecy from a dream
  rpc DreamProphecy(DreamRequest) returns (ProphecyResponse);

  // TagDream extracts tags from a dream using OpenAI
  rpc TagDream(DreamRequest) returns (TagResponse);

  // GetAIInsights streams AI insights for a user's dreams
  rpc GetAIInsights(UserRequest) returns (stream DreamInsight);

  // Friend system
  rpc SendFriendRequest(FriendRequestMsg) returns (FriendResponseMsg) {
    option (google.api.http) = {
      post: "/api/friends/request"
      body: "*"
    };
  }
  rpc AcceptFriendRequest(FriendRequestMsg) returns (FriendResponseMsg) {
    option (google.api.http) = {
      post: "/api/friends/accept"
      body: "*"
    };
  }
  rpc RemoveFriend(FriendRequestMsg) returns (FriendResponseMsg) {
    option (google.api.http) = {
      post: "/api/friends/remove"
      body: "*"
    };
  }
  rpc ListFriends(UserRequest) returns (FriendList) {
    option (google.api.http) = {
      get: "/api/friends"
    };
  }
  rpc ListFriendsDreams(FriendsDreamsRequest) returns (FriendsDreamsResponse) {
    option (google.api.http) = {
      get: "/api/friends/dreams"
    };
  }
}
