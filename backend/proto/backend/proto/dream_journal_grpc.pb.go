// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: dream_journal.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DreamJournal_CreateDream_FullMethodName = "/dreamjournal.DreamJournal/CreateDream"
	DreamJournal_ListDreams_FullMethodName  = "/dreamjournal.DreamJournal/ListDreams"
)

// DreamJournalClient is the client API for DreamJournal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DreamJournal service definition
type DreamJournalClient interface {
	// CreateDream creates a new dream entry
	CreateDream(ctx context.Context, in *DreamRequest, opts ...grpc.CallOption) (*DreamResponse, error)
	// ListDreams streams dreams based on the request parameters
	ListDreams(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Dream], error)
}

type dreamJournalClient struct {
	cc grpc.ClientConnInterface
}

func NewDreamJournalClient(cc grpc.ClientConnInterface) DreamJournalClient {
	return &dreamJournalClient{cc}
}

func (c *dreamJournalClient) CreateDream(ctx context.Context, in *DreamRequest, opts ...grpc.CallOption) (*DreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DreamResponse)
	err := c.cc.Invoke(ctx, DreamJournal_CreateDream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamJournalClient) ListDreams(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Dream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DreamJournal_ServiceDesc.Streams[0], DreamJournal_ListDreams_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequest, Dream]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DreamJournal_ListDreamsClient = grpc.ServerStreamingClient[Dream]

// DreamJournalServer is the server API for DreamJournal service.
// All implementations must embed UnimplementedDreamJournalServer
// for forward compatibility.
//
// DreamJournal service definition
type DreamJournalServer interface {
	// CreateDream creates a new dream entry
	CreateDream(context.Context, *DreamRequest) (*DreamResponse, error)
	// ListDreams streams dreams based on the request parameters
	ListDreams(*ListRequest, grpc.ServerStreamingServer[Dream]) error
	mustEmbedUnimplementedDreamJournalServer()
}

// UnimplementedDreamJournalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDreamJournalServer struct{}

func (UnimplementedDreamJournalServer) CreateDream(context.Context, *DreamRequest) (*DreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDream not implemented")
}
func (UnimplementedDreamJournalServer) ListDreams(*ListRequest, grpc.ServerStreamingServer[Dream]) error {
	return status.Errorf(codes.Unimplemented, "method ListDreams not implemented")
}
func (UnimplementedDreamJournalServer) mustEmbedUnimplementedDreamJournalServer() {}
func (UnimplementedDreamJournalServer) testEmbeddedByValue()                      {}

// UnsafeDreamJournalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DreamJournalServer will
// result in compilation errors.
type UnsafeDreamJournalServer interface {
	mustEmbedUnimplementedDreamJournalServer()
}

func RegisterDreamJournalServer(s grpc.ServiceRegistrar, srv DreamJournalServer) {
	// If the following call pancis, it indicates UnimplementedDreamJournalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DreamJournal_ServiceDesc, srv)
}

func _DreamJournal_CreateDream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DreamJournalServer).CreateDream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DreamJournal_CreateDream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DreamJournalServer).CreateDream(ctx, req.(*DreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DreamJournal_ListDreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DreamJournalServer).ListDreams(m, &grpc.GenericServerStream[ListRequest, Dream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DreamJournal_ListDreamsServer = grpc.ServerStreamingServer[Dream]

// DreamJournal_ServiceDesc is the grpc.ServiceDesc for DreamJournal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DreamJournal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dreamjournal.DreamJournal",
	HandlerType: (*DreamJournalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDream",
			Handler:    _DreamJournal_CreateDream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDreams",
			Handler:       _DreamJournal_ListDreams_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dream_journal.proto",
}
