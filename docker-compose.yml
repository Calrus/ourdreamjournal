services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: dreamjournal
      POSTGRES_PASSWORD: dreamjournal
      POSTGRES_DB: dreamjournal
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dreamjournal"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate:v4.18.3
    command: ["-path", "/migrations", "-database", "postgres://dreamjournal:dreamjournal@postgres:5432/dreamjournal?sslmode=disable", "up"]
    working_dir: /migrations
    volumes:
      - ./backend/migrations:/migrations
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    environment:
      DATABASE_URL: "postgres://dreamjournal:dreamjournal@postgres:5432/dreamjournal?sslmode=disable"
      PORT: "50051"
      # RESET_DB: "true"   # Uncomment to reset the database on next up
      POSTGRES_USER: dreamjournal
      POSTGRES_PASSWORD: dreamjournal
      POSTGRES_DB: dreamjournal
      POSTGRES_HOST: postgres
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
    volumes:
      - ./backend/migrations:/migrations
    depends_on:
      migrate:
        condition: service_completed_successfully

  frontend:
    build:
      context: ./frontend/dream-journal
      dockerfile: Dockerfile
      # Always build without cache
      # This is not a standard docker-compose option, but you can use the command line:
      # docker-compose build --no-cache frontend
    ports:
      - "80:80"
    depends_on:
      - backend

volumes:
  postgres_data:
